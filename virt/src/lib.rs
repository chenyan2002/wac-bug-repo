// Generated by `wit-bindgen` 0.43.0. DO NOT EDIT!
// Options used:
//   * stubs
//   * runtime_path: "wit_bindgen_rt"
pub struct Handle;
impl exports::wasi::io::io::GuestHandle for Handle {
  #[allow(unused_variables)]
  #[allow(async_fn_in_trait)]
    fn get() -> exports::wasi::io::io::Handle {
        let v = Handle;
        exports::wasi::io::io::Handle::new(v)
    }
  #[allow(unused_variables)]
  #[allow(async_fn_in_trait)]
    fn write(&self,x: _rt::String,) -> (){
    }
}
impl exports::wasi::io::io::Guest for Stub {
  type Handle = Handle;
}
#[allow(dead_code, clippy::all)]
pub mod exports {
  pub mod wasi {
    pub mod io {

      #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
      pub mod io {
        #[used]
        #[doc(hidden)]
        static __FORCE_SECTION_REF: fn() =
        super::super::super::super::__link_custom_section_describing_imports;
        
        use super::super::super::super::_rt;

        #[derive(Debug)]
        #[repr(transparent)]
        pub struct Handle{
          handle: _rt::Resource<Handle>,
        }

        type _HandleRep<T> = Option<T>;

        impl Handle{
          /// Creates a new resource from the specified representation.
          ///
          /// This function will create a new resource handle by moving `val` onto
          /// the heap and then passing that heap pointer to the component model to
          /// create a handle. The owned handle is then returned as `Handle`.
          pub fn new<T: GuestHandle>(val: T) -> Self {
            Self::type_guard::<T>();
            let val: _HandleRep<T> = Some(val);
            let ptr: *mut _HandleRep<T> =
            _rt::Box::into_raw(_rt::Box::new(val));
            unsafe {
              Self::from_handle(T::_resource_new(ptr.cast()))
            }
          }

          /// Gets access to the underlying `T` which represents this resource.
          pub fn get<T: GuestHandle>(&self) -> &T {
            let ptr = unsafe { &*self.as_ptr::<T>() };
            ptr.as_ref().unwrap()
          }

          /// Gets mutable access to the underlying `T` which represents this
          /// resource.
          pub fn get_mut<T: GuestHandle>(&mut self) -> &mut T {
            let ptr = unsafe { &mut *self.as_ptr::<T>() };
            ptr.as_mut().unwrap()
          }

          /// Consumes this resource and returns the underlying `T`.
          pub fn into_inner<T: GuestHandle>(self) -> T {
            let ptr = unsafe { &mut *self.as_ptr::<T>() };
            ptr.take().unwrap()
          }

          #[doc(hidden)]
          pub unsafe fn from_handle(handle: u32) -> Self {
            Self {
              handle: unsafe { _rt::Resource::from_handle(handle) },
            }
          }

          #[doc(hidden)]
          pub fn take_handle(&self) -> u32 {
            _rt::Resource::take_handle(&self.handle)
          }

          #[doc(hidden)]
          pub fn handle(&self) -> u32 {
            _rt::Resource::handle(&self.handle)
          }

          // It's theoretically possible to implement the `GuestHandle` trait twice
          // so guard against using it with two different types here.
          #[doc(hidden)]
          fn type_guard<T: 'static>() {
            use core::any::TypeId;
            static mut LAST_TYPE: Option<TypeId> = None;
            unsafe {
              assert!(!cfg!(target_feature = "atomics"));
              let id = TypeId::of::<T>();
              match LAST_TYPE {
                Some(ty) => assert!(ty == id, "cannot use two types with this resource type"),
                None => LAST_TYPE = Some(id),
              }
            }
          }

          #[doc(hidden)]
          pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
            Self::type_guard::<T>();
            let _ = unsafe { _rt::Box::from_raw(handle as *mut _HandleRep<T>) };
          }

          fn as_ptr<T: GuestHandle>(&self) -> *mut _HandleRep<T> {
            Handle::type_guard::<T>();
            T::_resource_rep(self.handle()).cast()
          }
        }

        /// A borrowed version of [`Handle`] which represents a borrowed value
        /// with the lifetime `'a`.
        #[derive(Debug)]
        #[repr(transparent)]
        pub struct HandleBorrow<'a> {
          rep: *mut u8,
          _marker: core::marker::PhantomData<&'a Handle>,
        }

        impl<'a> HandleBorrow<'a>{
          #[doc(hidden)]
          pub unsafe fn lift(rep: usize) -> Self {
            Self {
              rep: rep as *mut u8,
              _marker: core::marker::PhantomData,
            }
          }

          /// Gets access to the underlying `T` in this resource.
          pub fn get<T: GuestHandle>(&self) -> &T {
            let ptr = unsafe { &mut *self.as_ptr::<T>() };
            ptr.as_ref().unwrap()
          }

          // NB: mutable access is not allowed due to the component model allowing
          // multiple borrows of the same resource.

          fn as_ptr<T: 'static>(&self) -> *mut _HandleRep<T> {
            Handle::type_guard::<T>();
            self.rep.cast()
          }
        }
        

        unsafe impl _rt::WasmResource for Handle{
          #[inline]
          unsafe fn drop(_handle: u32) {
            
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "[export]wasi:io/io")]
            unsafe extern "C" {
              #[link_name = "[resource-drop]handle"]
              fn drop(_: i32, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            unsafe extern "C" fn drop(_: i32, ) { unreachable!() }
            
            unsafe { drop(_handle as i32); }
          }
        }
        
        #[doc(hidden)]
        #[allow(non_snake_case, unused_unsafe)]
        pub unsafe fn _export_static_handle_get_cabi<T: GuestHandle>() -> i32 { unsafe {#[cfg(target_arch="wasm32")]
        _rt::run_ctors_once();let result0 = {
          T::get()
        };
        (result0).take_handle() as i32
      } }
      #[doc(hidden)]
      #[allow(non_snake_case, unused_unsafe)]
      pub unsafe fn _export_method_handle_write_cabi<T: GuestHandle>(arg0: *mut u8,arg1: *mut u8,arg2: usize,) { unsafe {#[cfg(target_arch="wasm32")]
      _rt::run_ctors_once();{
        let len0 = arg2;
        let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
        T::write(HandleBorrow::lift(arg0 as u32 as usize).get(), _rt::string_lift(bytes0))
      };
    } }
    pub trait Guest {
      type Handle: GuestHandle;
    }
    pub trait GuestHandle: 'static {

      #[doc(hidden)]
      unsafe fn _resource_new(val: *mut u8) -> u32
      where Self: Sized
      {
        
        #[cfg(target_arch = "wasm32")]
        #[link(wasm_import_module = "[export]wasi:io/io")]
        unsafe extern "C" {
          #[link_name = "[resource-new]handle"]
          fn new(_: *mut u8, ) -> i32;
        }

        #[cfg(not(target_arch = "wasm32"))]
        unsafe extern "C" fn new(_: *mut u8, ) -> i32 { unreachable!() }
        
        unsafe { new(val) as u32 }
      }

      #[doc(hidden)]
      fn _resource_rep(handle: u32) -> *mut u8
      where Self: Sized
      {
        
        #[cfg(target_arch = "wasm32")]
        #[link(wasm_import_module = "[export]wasi:io/io")]
        unsafe extern "C" {
          #[link_name = "[resource-rep]handle"]
          fn rep(_: i32, ) -> *mut u8;
        }

        #[cfg(not(target_arch = "wasm32"))]
        unsafe extern "C" fn rep(_: i32, ) -> *mut u8 { unreachable!() }
        
        unsafe { rep(handle as i32) }
      }

      
      #[allow(async_fn_in_trait)]
      fn get() -> Handle;
      #[allow(async_fn_in_trait)]
      fn write(&self,x: _rt::String,) -> ();
    }
    #[doc(hidden)]

    macro_rules! __export_wasi_io_io_cabi{
      ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

        #[unsafe(export_name = "wasi:io/io#[static]handle.get")]
        unsafe extern "C" fn export_static_handle_get() -> i32 {
          unsafe { $($path_to_types)*::_export_static_handle_get_cabi::<<$ty as $($path_to_types)*::Guest>::Handle>() }
        }
        #[unsafe(export_name = "wasi:io/io#[method]handle.write")]
        unsafe extern "C" fn export_method_handle_write(arg0: *mut u8,arg1: *mut u8,arg2: usize,) {
          unsafe { $($path_to_types)*::_export_method_handle_write_cabi::<<$ty as $($path_to_types)*::Guest>::Handle>(arg0, arg1, arg2) }
        }

        const _: () = {
          #[doc(hidden)]
          #[unsafe(export_name = "wasi:io/io#[dtor]handle")]
          #[allow(non_snake_case)]
          unsafe extern "C" fn dtor(rep: *mut u8) {
            unsafe {
              $($path_to_types)*::Handle::dtor::<
              <$ty as $($path_to_types)*::Guest>::Handle
              >(rep)
            }
          }
        };
        
      };);
    }
    #[doc(hidden)]
    pub(crate) use __export_wasi_io_io_cabi;

  }

}
}
}
mod _rt {
  #![allow(dead_code, clippy::all)]


  use core::fmt;
  use core::marker;
  use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

  /// A type which represents a component model resource, either imported or
  /// exported into this component.
  ///
  /// This is a low-level wrapper which handles the lifetime of the resource
  /// (namely this has a destructor). The `T` provided defines the component model
  /// intrinsics that this wrapper uses.
  ///
  /// One of the chief purposes of this type is to provide `Deref` implementations
  /// to access the underlying data when it is owned.
  ///
  /// This type is primarily used in generated code for exported and imported
  /// resources.
  #[repr(transparent)]
  pub struct Resource<T: WasmResource> {
    // NB: This would ideally be `u32` but it is not. The fact that this has
    // interior mutability is not exposed in the API of this type except for the
    // `take_handle` method which is supposed to in theory be private.
    //
    // This represents, almost all the time, a valid handle value. When it's
    // invalid it's stored as `u32::MAX`.
    handle: AtomicU32,
    _marker: marker::PhantomData<T>,
  }

  /// A trait which all wasm resources implement, namely providing the ability to
  /// drop a resource.
  ///
  /// This generally is implemented by generated code, not user-facing code.
  #[allow(clippy::missing_safety_doc)]
  pub unsafe trait WasmResource {
    /// Invokes the `[resource-drop]...` intrinsic.
    unsafe fn drop(handle: u32);
  }

  impl<T: WasmResource> Resource<T> {
    #[doc(hidden)]
    pub unsafe fn from_handle(handle: u32) -> Self {
      debug_assert!(handle != 0 && handle != u32::MAX);
      Self {
        handle: AtomicU32::new(handle),
        _marker: marker::PhantomData,
      }
    }

    /// Takes ownership of the handle owned by `resource`.
    ///
    /// Note that this ideally would be `into_handle` taking `Resource<T>` by
    /// ownership. The code generator does not enable that in all situations,
    /// unfortunately, so this is provided instead.
    ///
    /// Also note that `take_handle` is in theory only ever called on values
    /// owned by a generated function. For example a generated function might
    /// take `Resource<T>` as an argument but then call `take_handle` on a
    /// reference to that argument. In that sense the dynamic nature of
    /// `take_handle` should only be exposed internally to generated code, not
    /// to user code.
    #[doc(hidden)]
    pub fn take_handle(resource: &Resource<T>) -> u32 {
      resource.handle.swap(u32::MAX, Relaxed)
    }

    #[doc(hidden)]
    pub fn handle(resource: &Resource<T>) -> u32 {
      resource.handle.load(Relaxed)
    }
  }

  impl<T: WasmResource> fmt::Debug for Resource<T> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      f.debug_struct("Resource")
      .field("handle", &self.handle)
      .finish()
    }
  }

  impl<T: WasmResource> Drop for Resource<T> {
    fn drop(&mut self) {
      unsafe {
        match self.handle.load(Relaxed) {
          // If this handle was "taken" then don't do anything in the
          // destructor.
          u32::MAX => {}

          // ... but otherwise do actually destroy it with the imported
          // component model intrinsic as defined through `T`.
          other => T::drop(other),
        }
      }
    }
  }
  pub use alloc_crate::boxed::Box;

  #[cfg(target_arch = "wasm32")]
  pub fn run_ctors_once() {
    wit_bindgen_rt::run_ctors_once();
  }
  pub use alloc_crate::vec::Vec;
  pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
    if cfg!(debug_assertions) {
      String::from_utf8(bytes).unwrap()
    } else {
      unsafe { String::from_utf8_unchecked(bytes) }
    }
  }
  pub use alloc_crate::string::String;
  extern crate alloc as alloc_crate;
}

/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_imports_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::wasi::io::io::__export_wasi_io_io_cabi!($ty with_types_in $($path_to_types_root)*::exports::wasi::io::io);
  )
}
#[doc(inline)]
pub(crate) use __export_imports_impl as export;
export!(Stub);

#[cfg(target_arch = "wasm32")]
#[unsafe(link_section = "component-type:wit-bindgen:0.43.0:root:main:imports:encoded world")]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 256] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x82\x01\x01A\x02\x01\
A\x02\x01B\x07\x04\0\x06handle\x03\x01\x01i\0\x01@\0\0\x01\x04\0\x12[static]hand\
le.get\x01\x02\x01h\0\x01@\x02\x04self\x03\x01xs\x01\0\x04\0\x14[method]handle.w\
rite\x01\x04\x04\0\x0awasi:io/io\x05\0\x04\0\x11root:main/imports\x04\0\x0b\x0d\x01\
\0\x07imports\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x07\
0.235.0\x10wit-bindgen-rust\x060.43.0";

#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
  wit_bindgen_rt::maybe_link_cabi_realloc();
}


#[derive(Debug)]
pub struct Stub;

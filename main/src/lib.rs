// Generated by `wit-bindgen` 0.43.0. DO NOT EDIT!
// Options used:
//   * stubs
//   * runtime_path: "wit_bindgen_rt"
impl exports::component::main::main::Guest for Stub {
  #[allow(unused_variables)]
  #[allow(async_fn_in_trait)]
  fn test(x: exports::component::main::main::BodyHandle,) -> () { 
    let _ = component::main::http_resp::test(x);
    let instance = unsafe { component::main::http_body::BodyHandle::from_handle(0) };
    let _ = component::main::http_body::test(instance);
  }
}
#[allow(dead_code, clippy::all)]
pub mod component {
  pub mod main {

    #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
    pub mod async_io {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      use super::super::super::_rt;

      #[derive(Debug)]
      #[repr(transparent)]
      pub struct Handle{
        handle: _rt::Resource<Handle>,
      }

      impl Handle{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: unsafe { _rt::Resource::from_handle(handle) },
          }
        }

        #[doc(hidden)]
        pub fn take_handle(&self) -> u32 {
          _rt::Resource::take_handle(&self.handle)
        }

        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          _rt::Resource::handle(&self.handle)
        }
      }
      

      unsafe impl _rt::WasmResource for Handle{
        #[inline]
        unsafe fn drop(_handle: u32) {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "component:main/async-io")]
          unsafe extern "C" {
            #[link_name = "[resource-drop]handle"]
            fn drop(_: i32, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          unsafe extern "C" fn drop(_: i32, ) { unreachable!() }
          
          unsafe { drop(_handle as i32); }
        }
      }
      

    }


    #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
    pub mod http_body {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      pub type BodyHandle = super::super::super::component::main::async_io::Handle;
      #[allow(unused_unsafe, clippy::all)]
      #[allow(async_fn_in_trait)]
      pub fn test(x: BodyHandle,) -> (){
        unsafe {

          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "component:main/http-body")]
          unsafe extern "C" {
            #[link_name = "test"]
            fn wit_import0(_: i32, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          unsafe extern "C" fn wit_import0(_: i32, ) { unreachable!() }
          wit_import0((&x).take_handle() as i32);
        }
      }

    }


    #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
    pub mod http_resp {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      pub type BodyHandle = super::super::super::component::main::http_body::BodyHandle;
      #[allow(unused_unsafe, clippy::all)]
      #[allow(async_fn_in_trait)]
      pub fn test(x: BodyHandle,) -> (){
        unsafe {

          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "component:main/http-resp")]
          unsafe extern "C" {
            #[link_name = "test"]
            fn wit_import0(_: i32, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          unsafe extern "C" fn wit_import0(_: i32, ) { unreachable!() }
          wit_import0((&x).take_handle() as i32);
        }
      }

    }

  }
}
#[allow(dead_code, clippy::all)]
pub mod exports {
  pub mod component {
    pub mod main {

      #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
      pub mod main {
        #[used]
        #[doc(hidden)]
        static __FORCE_SECTION_REF: fn() =
        super::super::super::super::__link_custom_section_describing_imports;
        
        use super::super::super::super::_rt;
        pub type BodyHandle = super::super::super::super::component::main::http_body::BodyHandle;
        #[doc(hidden)]
        #[allow(non_snake_case, unused_unsafe)]
        pub unsafe fn _export_test_cabi<T: Guest>(arg0: i32,) { unsafe {#[cfg(target_arch="wasm32")]
        _rt::run_ctors_once();{
          T::test(super::super::super::super::component::main::async_io::Handle::from_handle(arg0 as u32))
        };
      } }
      pub trait Guest {
        #[allow(async_fn_in_trait)]
        fn test(x: BodyHandle,) -> ();
      }
      #[doc(hidden)]

      macro_rules! __export_component_main_main_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[unsafe(export_name = "component:main/main#test")]
          unsafe extern "C" fn export_test(arg0: i32,) {
            unsafe { $($path_to_types)*::_export_test_cabi::<$ty>(arg0) }
          }
        };);
      }
      #[doc(hidden)]
      pub(crate) use __export_component_main_main_cabi;

    }

  }
}
}
mod _rt {
  #![allow(dead_code, clippy::all)]


  use core::fmt;
  use core::marker;
  use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

  /// A type which represents a component model resource, either imported or
  /// exported into this component.
  ///
  /// This is a low-level wrapper which handles the lifetime of the resource
  /// (namely this has a destructor). The `T` provided defines the component model
  /// intrinsics that this wrapper uses.
  ///
  /// One of the chief purposes of this type is to provide `Deref` implementations
  /// to access the underlying data when it is owned.
  ///
  /// This type is primarily used in generated code for exported and imported
  /// resources.
  #[repr(transparent)]
  pub struct Resource<T: WasmResource> {
    // NB: This would ideally be `u32` but it is not. The fact that this has
    // interior mutability is not exposed in the API of this type except for the
    // `take_handle` method which is supposed to in theory be private.
    //
    // This represents, almost all the time, a valid handle value. When it's
    // invalid it's stored as `u32::MAX`.
    handle: AtomicU32,
    _marker: marker::PhantomData<T>,
  }

  /// A trait which all wasm resources implement, namely providing the ability to
  /// drop a resource.
  ///
  /// This generally is implemented by generated code, not user-facing code.
  #[allow(clippy::missing_safety_doc)]
  pub unsafe trait WasmResource {
    /// Invokes the `[resource-drop]...` intrinsic.
    unsafe fn drop(handle: u32);
  }

  impl<T: WasmResource> Resource<T> {
    #[doc(hidden)]
    pub unsafe fn from_handle(handle: u32) -> Self {
      debug_assert!(handle != 0 && handle != u32::MAX);
      Self {
        handle: AtomicU32::new(handle),
        _marker: marker::PhantomData,
      }
    }

    /// Takes ownership of the handle owned by `resource`.
    ///
    /// Note that this ideally would be `into_handle` taking `Resource<T>` by
    /// ownership. The code generator does not enable that in all situations,
    /// unfortunately, so this is provided instead.
    ///
    /// Also note that `take_handle` is in theory only ever called on values
    /// owned by a generated function. For example a generated function might
    /// take `Resource<T>` as an argument but then call `take_handle` on a
    /// reference to that argument. In that sense the dynamic nature of
    /// `take_handle` should only be exposed internally to generated code, not
    /// to user code.
    #[doc(hidden)]
    pub fn take_handle(resource: &Resource<T>) -> u32 {
      resource.handle.swap(u32::MAX, Relaxed)
    }

    #[doc(hidden)]
    pub fn handle(resource: &Resource<T>) -> u32 {
      resource.handle.load(Relaxed)
    }
  }

  impl<T: WasmResource> fmt::Debug for Resource<T> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      f.debug_struct("Resource")
      .field("handle", &self.handle)
      .finish()
    }
  }

  impl<T: WasmResource> Drop for Resource<T> {
    fn drop(&mut self) {
      unsafe {
        match self.handle.load(Relaxed) {
          // If this handle was "taken" then don't do anything in the
          // destructor.
          u32::MAX => {}

          // ... but otherwise do actually destroy it with the imported
          // component model intrinsic as defined through `T`.
          other => T::drop(other),
        }
      }
    }
  }
  
  #[cfg(target_arch = "wasm32")]
  pub fn run_ctors_once() {
    wit_bindgen_rt::run_ctors_once();
  }
}

/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_root_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::component::main::main::__export_component_main_main_cabi!($ty with_types_in $($path_to_types_root)*::exports::component::main::main);
  )
}
#[doc(inline)]
pub(crate) use __export_root_impl as export;
export!(Stub);

#[cfg(target_arch = "wasm32")]
#[unsafe(link_section = "component-type:wit-bindgen:0.43.0:component:main:root:encoded world")]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 439] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xbc\x02\x01A\x02\x01\
A\x0a\x01B\x01\x04\0\x06handle\x03\x01\x03\0\x17component:main/async-io\x05\0\x02\
\x03\0\0\x06handle\x01B\x05\x02\x03\x02\x01\x01\x04\0\x0bbody-handle\x03\0\0\x01\
i\x01\x01@\x01\x01x\x02\x01\0\x04\0\x04test\x01\x03\x03\0\x18component:main/http\
-body\x05\x02\x02\x03\0\x01\x0bbody-handle\x01B\x05\x02\x03\x02\x01\x03\x04\0\x0b\
body-handle\x03\0\0\x01i\x01\x01@\x01\x01x\x02\x01\0\x04\0\x04test\x01\x03\x03\0\
\x18component:main/http-resp\x05\x04\x01B\x05\x02\x03\x02\x01\x03\x04\0\x0bbody-\
handle\x03\0\0\x01i\x01\x01@\x01\x01x\x02\x01\0\x04\0\x04test\x01\x03\x04\0\x13c\
omponent:main/main\x05\x05\x04\0\x13component:main/root\x04\0\x0b\x0a\x01\0\x04r\
oot\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.235.0\x10\
wit-bindgen-rust\x060.43.0";

#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
  wit_bindgen_rt::maybe_link_cabi_realloc();
}


#[derive(Debug)]
pub struct Stub;
